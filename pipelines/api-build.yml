trigger:
  branches:
    include:
      - pbi/104954_Move_New_Library_API_to_Radix

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'

# Global variables for the pipeline
variables:
 - template: templates/variables/library-variables.yml@templates
 - template: templates/variables/procosys-global-variables.yml@templates

 # Container Registry
 - name: 'repositoryName'
   value: 'library/api'

stages:
# Run tests Stage
- stage: runtests
  displayName: 'Run tests'
  variables:
    envName: 'runtests'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    testPath: '$(Build.SourcesDirectory)/src/Equinor.ProCoSys.Library.sln'

  jobs:
  # Run Test
  - template: /templates/pipelines/runtest.yml@templates
    parameters:
      deploymentName: 'runtests'
      dependsOn: ''
      envGroup: '${{ variables.envGroupName }}'
      testPath: '${{ variables.testPath }}'

# build stage. Docker build, tag and push
- stage: Build
  displayName: 'Build'
  dependsOn: 'runtests'
  variables:
    envName: 'build'
    envRg: '${{ variables.envRgName }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'
    dockerfilePath: '$(Build.SourcesDirectory)/src/Equinor.Procosys.Library.WebApi/Dockerfile'

  jobs:
  - template: /templates/pipelines/dockerbuild.yml@templates
    parameters:
      condition: and(succeeded()
      deploymentName: 'docker_build_push'
      dependsOn: ''
      env: 'pcs-${{ variables.envName }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: ${{ variables.dockerfilePath }}
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: ${{ variables.repositoryName }}
      dockerRegistryServiceConnection: $(dockerRegistryServiceConnectionName)

# Dev deploy stage
- stage: DeployDev
  displayName: 'Dev'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/pbi/104954_Move_New_Library_API_to_Radix')) #TODO
  variables:
    envName: 'dev'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    jobs:
    - deployment: Deploy
      displayName: Deploy to dev
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Deploy to Radix
              - template: templates/radix-deploy.yml
                parameters:
                  imageTagNameBackend: '${{ variables.versionNumber }}$(Build.BuildId)'

# Test deploy stage
- stage: DeployTest
  displayName: 'Test'
  dependsOn: 'DeployDev'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/pbi/104954_Move_New_Library_API_to_Radix')) #TODO
  variables:
    envName: 'test'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    radixPromoteFromEnv: 'dev'
  jobs:
    - deployment: Deploy
      displayName: Promote to test
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(radixPromoteFromEnv)
                  toEnvironment: $(envName)
                  deploymentName: $(radixJobName)

# Prod deploy stage
- stage: DeployProd
  displayName: 'Prod'
  dependsOn: 'DeployTest'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/pbi/104954_Move_New_Library_API_to_Radix')) #TODO
  variables:
    envName: 'prod'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    radixPromoteFromEnv: 'test'
  jobs:
    - deployment: Deploy
      displayName: Promote to prod
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(radixPromoteFromEnv)
                  toEnvironment: $(envName)
                  deploymentName: $(radixJobName)
