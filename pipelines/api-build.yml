trigger:
  branches:
    include:
      - master

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'
    ref: 95398_library_use_ai_connectionstring

# Global variables for the pipeline
variables:
 - template: templates/variables/library-variables.yml@templates
 - template: templates/variables/procosys-global-variables.yml@templates

 # Container Registry
 - name: 'repositoryName'
   value: 'library/api'

stages:
# build stage. Docker build, tag and push
- stage: build
  displayName: 'Build'
  variables:
    envName: 'build'
    envRg: '${{ variables.envRgName }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'
    dockerfilePath: '$(Build.SourcesDirectory)/src/Equinor.Procosys.Library.WebApi/Dockerfile'

  jobs:
  - template: /templates/pipelines/dockerbuild.yml@templates
    parameters:
      condition: and(succeeded()
      deploymentName: 'docker_build_push'
      dependsOn: ''
      env: 'pcs-${{ variables.envName }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: ${{ variables.dockerfilePath }}
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: ${{ variables.repositoryName }}
      dockerRegistryServiceConnection: $(dockerRegistryServiceConnectionName)

# Dev deploy stage
- stage: dev
  displayName: 'Dev'
  dependsOn: 'build'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'dev'
    envRg: '${{ variables.envRgName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 
    aspNetCoreEnvironment: 'Development'
    kv: '$(kvName)'
    kvRg: '$(envRgName)'

  jobs:
  - template: /templates/pipelines/kubernetes/library-deploy.yml@templates
    parameters:
      deploymentName: 'deploy_dev_to_k8s'
      dependsOn: ''
      serviceConnection: '${{ variables.serviceConnection }}'
      env: '${{ variables.envName }}'
      envRg: 'pcs-hosting-rg'
      envGroup: '${{ variables.envGroupName }}'
      dockerImage: 'procosys.azurecr.io/library/api:$(Build.BuildId)'
      clusterName: 'pcs-aks-test'
      kvTenantIdSecret: '${{ variables.kvTenantIdSecret }}'
      kvClientIdName: '${{ variables.kvClientIdName }}'
      kvUriName: '${{ variables.kvUriName }}'
      kvClientSecretName: '${{ variables.kvClientSecretName }}'
      kvAiConnStringSecretName: '${{ variables.kvAiConnStringSecretName }}'
      kvConnStringsSecret: '${{ variables.kvConnStringsSecret }}'
      aspNetCoreEnvironment: '${{ variables.aspNetCoreEnvironment }}'
      kvName: '${{ variables.kv }}'
      kvRgName: '${{ variables.kvRg }}'
      replicas: 2

# Test deploy stage
- stage: test
  displayName: 'Test'
  dependsOn: 'dev'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'test'
    envRg: '${{ variables.envRgName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 
    aspNetCoreEnvironment: 'Test'
    kv: '$(kvName)'
    kvRg: '$(envRgName)'

  jobs:
  - template: /templates/pipelines/kubernetes/library-deploy.yml@templates
    parameters:
      deploymentName: 'deploy_test_to_k8s'
      dependsOn: ''
      serviceConnection: '${{ variables.serviceConnection }}'
      env: '${{ variables.envName }}'
      envRg: 'pcs-hosting-rg'
      envGroup: '${{ variables.envGroupName }}'
      dockerImage: 'procosys.azurecr.io/library/api:$(Build.BuildId)'
      clusterName: 'pcs-aks-test'
      kvTenantIdSecret: '${{ variables.kvTenantIdSecret }}'
      kvClientIdName: '${{ variables.kvClientIdName }}'
      kvUriName: '${{ variables.kvUriName }}'
      kvClientSecretName: '${{ variables.kvClientSecretName }}'
      kvConnStringsSecret: '${{ variables.kvConnStringsSecret }}'
      kvAiConnStringSecretName: '${{ variables.kvAiConnStringSecretName }}'
      aspNetCoreEnvironment: '${{ variables.aspNetCoreEnvironment }}'
      kvName: '${{ variables.kv }}'
      kvRgName: '${{ variables.kvRg }}'
      replicas: 2

# Prod deploy stage
- stage: prod
  displayName: 'Prod'
  dependsOn: 'test'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'prod'
    envRg: '${{ variables.envRgName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    serviceConnection: '${{ variables.prodServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 
    aspNetCoreEnvironment: 'Prod'
    kvClientId: '$(kvClientIdName)'
    kvClientSecret: '$(kvClientSecretName)'
    kv: '$(kvName)'
    kvRg: '$(envRgName)'

  jobs:
  - template: /templates/pipelines/kubernetes/library-deploy.yml@templates
    parameters:
      deploymentName: 'deploy_prod_to_k8s'
      dependsOn: ''
      serviceConnection: '${{ variables.serviceConnection }}'
      env: '${{ variables.envName }}'
      envRg: 'pcs-hosting-rg'
      envGroup: '${{ variables.envGroupName }}'
      dockerImage: 'procosys.azurecr.io/library/api:$(Build.BuildId)'
      clusterName: 'pcs-aks-prod'
      kvTenantIdSecret: '${{ variables.kvTenantIdSecret }}'
      kvClientIdName: '${{ variables.kvClientIdName }}'
      kvUriName: '${{ variables.kvUriName }}'
      kvClientSecretName: '${{ variables.kvClientSecretName }}'
      kvAiConnStringSecretName: '${{ variables.kvAiConnStringSecretName }}'
      aspNetCoreEnvironment: '${{ variables.aspNetCoreEnvironment }}'
      kvConnStringsSecret: '${{ variables.kvConnStringsSecret }}'
      kvName: '${{ variables.kv }}'
      kvRgName: '${{ variables.kvRg }}'
      replicas: 3
